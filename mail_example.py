#!/usr/bin/env python3

import smtplib
import sys
import os
import logging
import email
import imaplib
from email import encoders
from email.mime.base import MIMEBase
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText

_logger = logging.getLogger(__name__)

#-----------------------------------------------------------------------------------------------------------------------
#
SMTP_SERVER      = "smtp.gmail.com"
SMTP_SERVER_PORT = 587   # SSL 465   TLS 587
SMTP_LOGIN       = "dbradul@gmail.com"
SMTP_PASSWORD    = "xxxxx"
EMAIL_SENDER     = "dbradul@gmail.com"
EMAIL_RECEIVER   = "dbradul@gmail.com"

IMAP_USER        = "dbradul"
IMAP_PWD         = "xxxxx"
FILE_LIST        = ('test1.txt', 'test2.txt', 'test3.txt')


#-----------------------------------------------------------------------------------------------------------------------
#
def send_email(attachments=None):
    msg = MIMEMultipart()
    msg['Subject'] = 'Report'
    msg['To'] = EMAIL_RECEIVER #'; '.join(recipients)
    msg['From'] = EMAIL_SENDER
    msg.preamble = 'You will not see this in a MIME-aware mail reader.\n'
    msg.attach(MIMEText("This mail is autogenerated, don't reply."))

    if attachments is not None:
        for attachment in attachments:
            try:
                with open(attachment, 'rb') as fp:
                    attach = MIMEBase('application', "octet-stream")
                    attach.set_payload(fp.read())
                encoders.encode_base64(attach)
                attach.add_header('Content-Disposition', 'attachment', filename=os.path.basename(attachment))
                msg.attach(attach)
            except:
                _logger.error("Unable to open one of the attachments:", sys.exc_info()[0])
                raise

    server = smtplib.SMTP(SMTP_SERVER, SMTP_SERVER_PORT)
    server.ehlo()
    server.starttls()
    server.login(SMTP_LOGIN, SMTP_PASSWORD)
    server.sendmail(EMAIL_SENDER, EMAIL_RECEIVER, msg.as_string())
    server.quit()
    _logger.info("Email was successfully sent!")


#-----------------------------------------------------------------------------------------------------------------------
#
def receive_email():
    imap_server = imaplib.IMAP4_SSL("imap.gmail.com")
    imap_server.login(IMAP_USER, IMAP_PWD)
    imap_server.select('Inbox')
    resp, items = imap_server.search(None, "SUBJECT Report")  # you could filter using the IMAP rules here (check http://www.example-code.com/csharp/imap-search-critera.asp)
    items = items[0].split()  # getting the mails id

    for emailid in items:
        resp, data = imap_server.fetch(emailid, "(RFC822)")  # fetching the mail, "`(RFC822)`" means "get the whole stuff", but you can ask for headers only, etc
        if resp != 'OK':
            continue

        email_body = data[0][1]  # getting the mail content
        mail = email.message_from_string(email_body.decode())  # parsing the mail content to get a mail object

        # Check if any attachments at all
        if mail.get_content_maintype() != 'multipart':
            continue

        _logger.info("[" + mail["From"] + "] :" + mail["Subject"])

        # we use walk to create a generator so we can iterate on the parts and forget about the recursive headach
        for part in mail.walk():
            # multipart are just containers, so we skip them
            if part.get_content_maintype() == 'multipart':
                continue

            # is this part an attachment ?
            if part.get('Content-Disposition') is None:
                continue

            filename = part.get_filename() + '_roundtrip'
            att_path = os.path.join(os.path.expanduser('~'), filename)

            if not os.path.isfile(att_path):
                fp = open(att_path, 'wb')
                fp.write(part.get_payload(decode=True))
                fp.close()


#-----------------------------------------------------------------------------------------------------------------------
#
def cleanup():
    for file_name in FILE_LIST:
        file_path = os.path.join(os.path.expanduser('~'), file_name)
        if os.path.isfile(file_path):
            os.remove(file_path)


#-----------------------------------------------------------------------------------------------------------------------
#
if __name__ == "__main__":
    try:
        attachments = []
        for file_name in FILE_LIST:
            file_path = os.path.join(os.path.expanduser('~'), file_name)
            with open(file_path, 'w+') as f:
                f.write(file_name)
                attachments += [file_path]
        send_email(attachments)
        receive_email()
    except BaseException as e:
        _logger.error(str(e))
    finally:
        cleanup()
